* resources_request has changed format - it now returns an array like this
  [ {:name => "forums", :name_prefix => "forum_", :key => :forum_id, :id => "1"}, {:name => "posts"}]
  Singular resources are detected properly (see spec/specs/resources_controller_spec for some tests).
  This paves the way for singular_resource support, and better 'many routes/one controller' support
  
  Decided that Patching Routing was a bad idea, so route is re-recognized using the request path.  This
  only happens for controllers with :load_enclosing => true

* You can now call methods such as enclosing_resource_path, enclosing_resources_path, etc 
  in your controller and view and the correct url helper will be called.  These url_helpers are defined
  as they are needed, so it's pretty fast.
  
* Removing routing decoration for now

* Enclosing resources are now all loaded by one method :load_enclosing which is a prepend_before_filter.
  This means that you can access the enclosing resources in all before_filters, even when a subclass adds
  more nestings.
  
  Example:
  
    class PostsController < ApplicationController
      resources_controller_for :posts
    end
    
    class UserPostsController < PostsController
      nested_in :user
      
      before_filter {|c| raise 'boom' if @user.name == 'Santa'}
    end
  
* Removed ResourceService proxy class.  This was mainly used for BC with rails <= 1.2.2.  If you're
  using this, then freeze to r377 of resources_controller.  The resource_service is now either an
  ActiveRecord or association proxy.
  
* Added route decoration to access the recognized route in the controller (for future parsing of
  singular resources, and better polymorphic support)

* Removed Ardes::ResourcesController::Spec::ViewHelper as it's best to not have a dependency
  like this in your specs.  Just stub out the resource methods that are needed by that view,
  or use the default assigns. 

* Named path support is much improved.  All named routes for the current resource can be
  called by substituting 'resource'.  E.g. the following methods in your controller or
  view will work: :formatted_resource_path, :preview_resource_path (if :preview is in :member),
  :resource_tags_path, etc, etc.
  This helps with decoupling the model name from the controller and view.

* Added flash tests [frederikfix at eml dot cc]

* Added rjs actions [frederikfix at eml dot cc]

* Added Ardes::ResourcesController::Spec::ViewHelper for easy view testing

* Added Helper#form_for_resource for easy form generation, see rdoc for details

* Enclosed named paths use the new edge rails conventions for named routes.

  So to get the path to edit a child tag resource (where resource is 'forum:1')
    edit_resource_tag_path(@tag) # => '/forums/1/tags/2/edit'

* Handles options passed to named routes
  
    resource_path(:sort_by => 'article') # => '/forums/2?sort_by=article'

* Now handles enclosing named paths.  You can reference named routes that are
  'below' (or enclosed by) the current resource by appending resource_ to that
  named route. [thanks Chris Hapgood for the initial idea]

* (find|new)_resource(s) methods are now defined by resources_controller_for only
  if they do not already exist

* Better regexp for resources_request [Chris Hapgood]

* Added more specs to get coverage to 100%

* Upgraded to rpsec 0.9, improved Rakefile and specs so that spec:plugins will work

* Removed ApplicationController from spec/app.rb to avoid conflicts with en-
  closing rails application

* Added method_missing proxy to ResourceService, to enable the resource_service
  to be used for things other than find or new (for example Pagination) [Dan Kubb]

* Fixed small error in flash message of destroy action [Dan Kubb]

* Removing experimental cruft

* CHANGELOG started