# acts_as_tree_extensions (in general)
# * should preload parent association in children
# * should return common_ancestor_of two nodes
# * should return nil when getting common_ancestor_of nodes without a common ancestor
# * should return leaves of self (descendent nodes with no children) with leaves
# * should return child of specified node if node is an ancestor of self with child_of_ancestor(node)
# * should return root node in branch with child_of_ancestor(nil)
# * should return nil if node is not an ancestor of self with child_of_ancestor
# * should return ancestors enumerator (ancestors in leaf to root order) with ancestors
# * should return ancestors enumerator (self + ancestors in leaf to root order) with self_and_ancestors
# * should return descendents enumerator (descendents in recursive child descent order) with descendents
# * should return descendents enumerator (self + descendents in recursive child descent order) with self_and_descendents
# acts_as_tree_extensions predicate methods (? methods)
# * should be root? when node has no parent
# * should be child? when node has a parent
# * should be leaf? when node has no children
# * should be ancestor_of? when argument is ancestor of self
# * should be descendent_of? when argument is descendent of self
# acts_as_tree enumerator
# acts_as_tree_extension class
# * should return leaves
# * should return roots_and_leaves
# * should return roots_and_leaves associated with each other
